name: "docker ubuntu latest CI workflow"


on:
  push:
    branches: [ test ]
  # schedule:
  #     - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month 


jobs:

  ubuntu-latest-job:
    name: "docker ubuntu latest"
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node:
    #      - base
    #      - modsecurity
    #     #  - clearlinux    
    env:
      distribution: "ubuntu"
      version: "latest"
      name: "ubuntu/base"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.ubuntu"
    steps:
    - uses: actions/checkout@v2.
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    # - name: "docker build ubuntu"
    #   run: |
    #     # destroyed afterwards (use --rm )
    #     # all subsequent Dockerfile commands generate new images and the cache is not used
    #     sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
    #     docker image ls
    #     docker image history ${name}:${version}
    #     docker system df -v               
    #     docker image inspect ${name}:${version}     
    # - name: "docker run with apparmor "
    #   run: |
    #     # https://docs.docker.com/engine/security/apparmor/
    #     docker run --rm -it --security-opt apparmor=docker-default hello-world        
    # # - name: "run test"
    #   run: |
    #     dir=$(pwd)
    #     cd $dir/dockerfiles/ubuntu/latest
    #     cd ${{matrix.node}}
    #     echo "############################################"
    #     echo "############################################"
    #     echo "Building  ${{matrix.node}} dockerfile"
    #     echo "############################################"
    #     echo "############################################"        
    #     docker build -t ${distribution}/${{matrix.node}} .    
