name: "modsecurity docker images CI workflow"


on:
  push:
    branches: [ test ]


jobs:

  modsecurity-ubuntu-latest-job:
    name: "modsecurity docker  images  ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "ubuntu" 
      version: "latest"
      name: "ubuntu2104/apache2"
      dockerfilename: "Dockerfile.ubuntu.modsecurity"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch         
    - name: "docker build apache2 base"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}/${version} . --file dockerfiles/${dockerfilename} 
        docker image ls
        docker image history ${name}/${version} 
        docker system df -v               
        docker image inspect ${name}/${version} 
    - name: "docker scan trivy apache2 base "
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}/${version} . --file dockerfiles/${dockerfilename} 
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
        trivy image ${name}/${version}


  modsecurity-nginx-ubuntu-latest-job:
    name: "modsecurity docker  images  ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "ubuntu" 
      version: "latest"
      name: "ubuntu2104/apache2"
      dockerfilename: "Dockerfile.ubuntu.modsecurity"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch
    - name: "os fingerprinting"
      run: |
        sudo apt-get update        
        sudo apt-get install apache2 -y
        sudo ufw enable
        sudo ufw allow 'Apache'
        sudo ufw status
        sudo systemctl status apache2
        sudo apt-get update
        sudo apt-get install libapache2-mod-security2 -y
        sudo systemctl restart apache2 
        #Ensure the installed software version is at least 2.9
        apt-cache show libapache2-mod-security2 | grep Version
        apt-cache show libapache2-mod-security2 
        apt-cache showpkg libapache2-mod-security2 
        #Copy the default ModSecurity configuration file to a new file
        sudo cp /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf
        # Download OWASP Core Rule Set
        # https://coreruleset.org/installation/
        wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.2.zip
        echo -n '88f336ba32a89922cade11a4b8e986f2e46a97cf v3.3.2.zip' | sha1sum -c -
        sudo apt-get install unzip -y
        unzip v3.3.2.zip
        # Move the CRS setup file from the new directory into your ModSecurity directory
        sudo mv coreruleset-3.3.2/crs-setup.conf.example /etc/modsecurity/crs-setup.conf
        # (Optional but recommended) Move the rules directory from the new directory to your ModSecurity directory
        sudo mv coreruleset-3.3.2/rules/ /etc/modsecurity/
        #ensure itâ€™ll load ModSecurity rules
        # IncludeOptional /etc/modsecurity/*.conf
        # Include /etc/modsecurity/rules/*.conf
        cat /etc/apache2/mods-enabled/security2.conf | grep modsecurity
        
